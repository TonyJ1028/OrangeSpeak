// Mocks generated by Mockito 5.4.4 from annotations
// in mobile/test/chat_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:mobile/models/channel.dart' as _i3;
import 'package:mobile/models/message.dart' as _i4;
import 'package:mobile/models/user.dart' as _i2;
import 'package:mobile/services/api_service.dart' as _i5;
import 'package:mobile/services/chat_service.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUser_0 extends _i1.SmartFake implements _i2.User {
  _FakeUser_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeChannel_1 extends _i1.SmartFake implements _i3.Channel {
  _FakeChannel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMessage_2 extends _i1.SmartFake implements _i4.Message {
  _FakeMessage_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiService extends _i1.Mock implements _i5.ApiService {
  MockApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.User> login(
    String? username,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            username,
            password,
          ],
        ),
        returnValue: _i6.Future<_i2.User>.value(_FakeUser_0(
          this,
          Invocation.method(
            #login,
            [
              username,
              password,
            ],
          ),
        )),
      ) as _i6.Future<_i2.User>);

  @override
  _i6.Future<void> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<_i2.User> register(
    String? username,
    String? password,
    String? email,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [
            username,
            password,
            email,
          ],
        ),
        returnValue: _i6.Future<_i2.User>.value(_FakeUser_0(
          this,
          Invocation.method(
            #register,
            [
              username,
              password,
              email,
            ],
          ),
        )),
      ) as _i6.Future<_i2.User>);

  @override
  _i6.Future<List<_i3.Channel>> getChannels() => (super.noSuchMethod(
        Invocation.method(
          #getChannels,
          [],
        ),
        returnValue: _i6.Future<List<_i3.Channel>>.value(<_i3.Channel>[]),
      ) as _i6.Future<List<_i3.Channel>>);

  @override
  _i6.Future<_i3.Channel> createChannel({
    required String? name,
    String? description,
    required bool? isVoiceChannel,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createChannel,
          [],
          {
            #name: name,
            #description: description,
            #isVoiceChannel: isVoiceChannel,
          },
        ),
        returnValue: _i6.Future<_i3.Channel>.value(_FakeChannel_1(
          this,
          Invocation.method(
            #createChannel,
            [],
            {
              #name: name,
              #description: description,
              #isVoiceChannel: isVoiceChannel,
            },
          ),
        )),
      ) as _i6.Future<_i3.Channel>);

  @override
  _i6.Future<void> joinChannel(String? channelId) => (super.noSuchMethod(
        Invocation.method(
          #joinChannel,
          [channelId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> leaveChannel(String? channelId) => (super.noSuchMethod(
        Invocation.method(
          #leaveChannel,
          [channelId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<String> getVoiceToken() => (super.noSuchMethod(
        Invocation.method(
          #getVoiceToken,
          [],
        ),
        returnValue: _i6.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #getVoiceToken,
            [],
          ),
        )),
      ) as _i6.Future<String>);

  @override
  _i6.Future<List<_i2.User>> getChannelUsers(String? channelId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getChannelUsers,
          [channelId],
        ),
        returnValue: _i6.Future<List<_i2.User>>.value(<_i2.User>[]),
      ) as _i6.Future<List<_i2.User>>);

  @override
  _i6.Future<List<_i4.Message>> getMessages(
    String? channelId, {
    int? before,
    int? limit = 50,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMessages,
          [channelId],
          {
            #before: before,
            #limit: limit,
          },
        ),
        returnValue: _i6.Future<List<_i4.Message>>.value(<_i4.Message>[]),
      ) as _i6.Future<List<_i4.Message>>);

  @override
  _i6.Future<_i4.Message> sendMessage(
    String? channelId,
    String? content,
    _i4.MessageType? type, {
    Map<String, dynamic>? metadata,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [
            channelId,
            content,
            type,
          ],
          {#metadata: metadata},
        ),
        returnValue: _i6.Future<_i4.Message>.value(_FakeMessage_2(
          this,
          Invocation.method(
            #sendMessage,
            [
              channelId,
              content,
              type,
            ],
            {#metadata: metadata},
          ),
        )),
      ) as _i6.Future<_i4.Message>);

  @override
  _i6.Future<_i4.Message> editMessage(
    String? channelId,
    String? messageId,
    String? content,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #editMessage,
          [
            channelId,
            messageId,
            content,
          ],
        ),
        returnValue: _i6.Future<_i4.Message>.value(_FakeMessage_2(
          this,
          Invocation.method(
            #editMessage,
            [
              channelId,
              messageId,
              content,
            ],
          ),
        )),
      ) as _i6.Future<_i4.Message>);

  @override
  _i6.Future<void> deleteMessage(
    String? channelId,
    String? messageId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteMessage,
          [
            channelId,
            messageId,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<List<_i4.Message>> searchMessages(
    String? channelId,
    String? query,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchMessages,
          [
            channelId,
            query,
          ],
        ),
        returnValue: _i6.Future<List<_i4.Message>>.value(<_i4.Message>[]),
      ) as _i6.Future<List<_i4.Message>>);
}

/// A class which mocks [ChatService].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatService extends _i1.Mock implements _i8.ChatService {
  MockChatService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onError(dynamic Function(dynamic)? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> joinChannel(
    String? channelId,
    String? token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #joinChannel,
          [
            channelId,
            token,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> leaveChannel(String? channelId) => (super.noSuchMethod(
        Invocation.method(
          #leaveChannel,
          [channelId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void addMessageHandler(
    String? channelId,
    dynamic Function(_i4.Message)? handler,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #addMessageHandler,
          [
            channelId,
            handler,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeMessageHandler(String? channelId) => super.noSuchMethod(
        Invocation.method(
          #removeMessageHandler,
          [channelId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addTypingHandler(
    String? channelId,
    dynamic Function(String)? handler,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #addTypingHandler,
          [
            channelId,
            handler,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeTypingHandler(String? channelId) => super.noSuchMethod(
        Invocation.method(
          #removeTypingHandler,
          [channelId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
